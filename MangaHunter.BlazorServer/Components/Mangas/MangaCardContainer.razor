@using MangaHunter.BlazorServer.Common
@using Serilog
@using MudBlazor
@using MangaHunter.BlazorServer.Common.Services
@using MangaHunter.Contracts.Hunter
@using ImgProxy
@inject IApiService ApiService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (HunterResponse is not {HunterDto:null} and {MangadexDto:null})
{
    <EmptyContainer HunterResponse="HunterResponse" DeleteUi="OnDeleteUi"/>
}

@if (HunterResponse is not {HunterDto:null} and not {MangadexDto: null})
{
    <MudCard Outlined="true" Class="@Class">
        <CardHeader Mangadex="HunterResponse.MangadexDto"/>
        <MudCardMedia Image="@ImgProxy(HunterResponse.MangadexDto.CoverArt?.Thumbnail512Px.ToString())"/>
        <MudCardContent>
            <MudStack Row="true">
                <StatusContainer Mangadex="HunterResponse.MangadexDto"/>
                @if (!IsSearchResult)
                {
                    <ReadingStatusContainer ReadingStatus="HunterResponse.HunterDto.Status"/>
                }
                <MudSpacer/>
                <TagsMenu Mangadex="@HunterResponse.MangadexDto"/>
            </MudStack>
            <MudDivider Class="ma-2"/>
            @if (!IsSearchResult)
            {
                <MangaUpdatesContainer
                    MangadexId="@HunterResponse.HunterDto.MangadexId.ToString()"
                    MangaUpdatesDto="@HunterResponse.MangaUpdatesDto"
                    Username="@Username"/>
                <RssContainer Username="@Username" MangadexId="@HunterResponse.HunterDto.MangadexId.ToString()"/>
            }
            else
            {
                <MudExpansionPanel Text="Description">
                    @{
                        var description = HunterResponse.MangadexDto.Description.EnglishOrDefault;
                        var indexOf = description.IndexOf("---", StringComparison.Ordinal);
                        var index = indexOf is -1 ? description.Length : indexOf;
                    }
                    <MudText>@description[.. index]</MudText>
                </MudExpansionPanel>
            }
        </MudCardContent>
        @if (!IsReadOnly)
        {
            <MudCardActions>
                @if (IsSearchResult)
                {
                    <CardActions Add="Add" DeleteUi="OnDeleteUi" HunterResponse="HunterResponse" IsSearchResult="IsSearchResult"/>
                    <MudSpacer/>
                    <IconSites Mangadex="HunterResponse.MangadexDto"/>
                }
                else
                {
                    <IconSites Mangadex="HunterResponse.MangadexDto"/>
                    <MudSpacer/>
                    <CardActions Add="Add" DeleteUi="OnDeleteUi" HunterResponse="HunterResponse" IsSearchResult="IsSearchResult"/>
                }
            </MudCardActions>
        }
        else
        {
            <MudCardActions>
                <IconSites Mangadex="HunterResponse.MangadexDto"/>
            </MudCardActions>
        }
    </MudCard>
}


@code {

    [CascadingParameter]
    protected UserState UserState { get; set; } = new();

    [Parameter]
    public HunterResponse HunterResponse { get; set; }

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public bool IsLandingPage { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public bool IsSearchResult { get; set; }

    [Parameter]
    public EventCallback<HunterResponse> Add { get; set; }

    [Parameter]
    public EventCallback<HunterResponse> OnDeleteUi { get; set; }

    protected override void OnParametersSet()
    {
        if (IsLandingPage)
        {
            IsSearchResult = false;
            IsReadOnly = true;
        }
        base.OnParametersSet();
    }

    private string Username => string.IsNullOrEmpty(UserState.Username) ? HunterResponse.HunterDto?.Username! : UserState.Username;
        const string salt = "68656C6C6F";
        const string key = "736563726574";

    private string ImgProxy(string? src) => ImgProxyBuilder.New
        .WithEndpoint("https://cdn.mangahunter.org")
        .WithCredentials(key, salt)
        .Build(src, encode: true);

}