@using Newtonsoft.Json.Linq
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManagerHandler NavigationManagerHandler
@inject IManagementApiService ManagementApiService
<MudThemeProvider Theme="UserState.Theme"/>
<MudSnackbarProvider/>
<MudDialogProvider/>
<MudLayout>
    <CascadingValue Value="UserState">
        <AppBar/>
        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth">
                @* <MudSelect Label="Choose MaxWidth : " AnchorOrigin="Origin.BottomCenter" @bind-Value="MaxWidth"> *@
                @*     <MudSelectItem Value="MaxWidth.ExtraSmall"/> *@
                @*     <MudSelectItem Value="MaxWidth.Small"/> *@
                @*     <MudSelectItem Value="MaxWidth.Medium"/> *@
                @*     <MudSelectItem Value="MaxWidth.Large"/> *@
                @*     <MudSelectItem Value="MaxWidth.ExtraLarge"/> *@
                @*     <MudSelectItem Value="MaxWidth.ExtraExtraLarge"/> *@
                @*     <MudSelectItem Value="MaxWidth.False"/> *@
                @* </MudSelect> *@
                @Body
            </MudContainer>
            <Particles/>
        </MudMainContent>
    </CascadingValue>
</MudLayout>

@code{
    private UserState UserState { get; } = new();

    private MaxWidth MaxWidth { get; } = MaxWidth.Large;

    protected override async Task OnInitializedAsync()
    {
        // var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = state.User;
        // if (user.Identity is {IsAuthenticated:true})
        // {
        //     UserState.MapFromClaims(state.User.Claims.ToList());
        //     if (!UserState.IsEmailVerified)
        //     {
        //         var returnUri = QueryHelpers.AddQueryString("auth/logout", "returnUrl", "/check_email");
        //         NavigationManagerHandler.NavigateTo(returnUri);
        //     }
        // }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // if (UserState.IsAuthenticated)
            // {
            //     var user = await ManagementApiService.GetUser(UserState.UserId);
            //     if (!user.IsError)
            //     {
            //         try
            //         {
            //             var jObject = user.Value.UserMetadata as JObject;
            //             var userMetaData = jObject?.ToObject<UserMetaData>();
            //             UserState.Theme.Palette = Palettes.GetPaletteFromString(userMetaData?.PaletteName);
            //             StateHasChanged();
            //         }
            //         catch (Exception e)
            //         {
            //             Log.Error(e, e.Message);
            //         }
            //     }
            // }
        }
    }
}