@inject IApiService ApiService
<MudDialog DisableSidePadding="true">
    <TitleContent>
        <MudText>Search in your list</MudText>
    </TitleContent>
    <DialogContent>
        @if (_isLoading)
        {
            <MudProgressCircular Indeterminate="true" Class="mx-auto"/>
        }
        else
        {
            <MudPaper Elevation="0" Class="mx-4">
                <SearchContainer Search="@Search" IsImmediate="true"/>
            </MudPaper>
            if (SearchResult is not {Count:0})
            {
                <MudContainer Style="max-height: 660px;overflow: auto">
                    <MangasContainer IsReadOnly="false" Response="SearchResult"/>
                </MudContainer>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudText>Total - @Response.Count</MudText>
        <MudSpacer/>
        <MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="Cancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Username { get; set; }

    private List<HunterResponse> Response { get; set; } = new();
    private List<HunterResponse> SearchResult { get; set; } = new();
    private bool _isLoading;
    
    protected override async Task OnParametersSetAsync()
    {
        Response = await FetchResponse();
    }

    private async Task<List<HunterResponse>> FetchResponse()
    {
        _isLoading = true;
        var parms = new QueryParameters {HasMangadex = true};
        var result = await ApiService.GetUserList(Username, parms);
        _isLoading = false;
        return !result.IsError ? result.Value : new List<HunterResponse>();
    }

    private void Search(string query)
    {
        SearchResult.Clear();
        foreach (var hr in Response.Where(hr => hr.MangadexDto != null && hr.MangadexDto.Title.EnglishOrDefault.Contains(query, StringComparison.InvariantCultureIgnoreCase)))
        {
            SearchResult.Add(hr);
        }
    }

    protected override void OnParametersSet()
    {
        MudDialog.Options.FullWidth = true;
        MudDialog.Options.MaxWidth = MaxWidth.ExtraLarge;
        MudDialog.SetOptions(MudDialog.Options);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

}