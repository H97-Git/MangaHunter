@page "/manga/{MangaId}"
@using ImgProxy
@inject IApiService ApiService

<PageHeader Title="@($"Manga {MangaId}")"/>

@if (HunterResponse is not {MangadexDto:null})
{
    <MudStack Row="true">
        <MudStack>
            <MudStack Row="true">
                <FlagIcon OriginalLanguage="HunterResponse.MangadexDto.OriginalLanguage"/>
                <MudTooltip Arrow="true" Placement="Placement.Top" Text="HunterResponse.MangadexDto.Title.EnglishOrDefault">
                    <MudText Class="trim" Typo="Typo.h6">@HunterResponse.MangadexDto.Attributes.Title.ToString()</MudText>
                    <MudText Typo="Typo.caption">PublicationDemographic</MudText>
                </MudTooltip>
            </MudStack>
            <MudImage Height="500" Src="Src"></MudImage>
            <MudStack Row="true">
                <TagsMenu MangadexNew="HunterResponse.MangadexDto"/>
                <MudSpacer/>
                <IconSites MangadexNew="HunterResponse.MangadexDto"/>
            </MudStack>
        </MudStack>
        <MudStack>
            <MudStack Row="true">
                <StatusContainer MangadexNew="HunterResponse.MangadexDto"/>
                @if (HunterResponse.HunterDto != null)
                {
                    <ReadingStatusContainer ReadingStatus="HunterResponse.HunterDto.Status"/>
                }
                <MangaUpdatesContainer Username="@UserState.Username" MangadexId="HunterResponse.HunterDto?.MangadexId.ToString()"/>
            </MudStack>
            <MudStack>
                <MudText Typo="Typo.h5">Description</MudText>
                @{
                    var description = HunterResponse.MangadexDto.Attributes.Description.ToString();
                    var indexOf = description.IndexOf("---", StringComparison.Ordinal);
                    var index = indexOf is -1 ? description.Length : indexOf;
                }
                <MudText Typo="Typo.body1">@description[.. index]</MudText>
                <MudStack>
                    <MudContainer>
                        <RssContainer Username="@UserState.Username" MangadexId="HunterResponse.HunterDto.MangadexId.ToString()"/>
                    </MudContainer>
                    <MudContainer>
                        <MudExpansionPanel Text="@($"Readings history : {HunterResponse.HunterDto.History.Count}")">
                            @if (HunterResponse.HunterDto!.History is not {Count:0})
                            {
                                <Timeline History="HunterResponse.HunterDto.History"/>
                            }
                        </MudExpansionPanel>
                    </MudContainer>
                </MudStack>
                <MudSpacer/>
                <CardActions IsSearchResult="false" HunterResponseNew="HunterResponse"/>
            </MudStack>
        </MudStack>
    </MudStack>
}

@code{

    [CascadingParameter]
    protected UserState UserState { get; set; }

    [Parameter]
    public string MangaId { get; set; } = string.Empty;

    private HunterResponseNew HunterResponse { get; set; } = new();
        const string salt = "68656C6C6F";
        const string key = "736563726574";

    private string Src => ImgProxy("HunterResponse.MangadexDto?.CoverArt?.Thumbnail512Px.ToString()");

    private static string ImgProxy(string? src) => ImgProxyBuilder.New
        .WithEndpoint("https://cdn.mangahunter.org")
        .WithCredentials(key, salt)
        .Build(src, encode: true);

    protected override async Task OnParametersSetAsync()
    {
        await FetchResponse(UserState.Username, MangaId);
    }

    private async Task FetchResponse(string username, string mangaId)
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(mangaId))
            return;
        var parameters = new QueryParameters {HasMangadex = true, HasMangaUpdates = true, HasMangaUpdatesRss = true};
        var result = await ApiService.GetMangaById(username, mangaId, parameters);
        if (!result.IsError)
        {
            HunterResponse = result.Value;
        }
    }

}