@page "/users/{OwnerUsername}/mangas/{Status}"
@page "/users/{OwnerUsername}/mangas"
@using MangaHunter.BlazorServer.Common.PrerenderCache
@inject IApiService ApiService
@inject IPrerenderCache PrerenderCache


<PageHeader Title="@($"Mangas list of @{OwnerUsername}")"/>
<ListHeader Status="@Status" OwnerUsername="@OwnerUsername"/>

@if (_isLoading)
{
    <MudStack Justify="@Justify.Center" AlignItems="@AlignItems.Center" Class="mx-auto">
        <MudProgressLinear Class="my-7" Indeterminate="true" Rounded="true" Size="Size.Large" Striped="true"/>
    </MudStack>
}
else
{
    if (Response.List is not {Count:0})
    {
        <MangasContainer IsReadOnly="@IsReadOnly" Response="@Response.List"/>
    }
}
<ListActions Page="Page" Response="Response" Status="@Status" />

@code{

    [CascadingParameter]
    protected UserState UserState { get; set; }

    [Parameter]
    public string? OwnerUsername { get; set; }

    private bool IsReadOnly => OwnerUsername != UserState.Username;

    [Parameter]
    public string? Status { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "p")]
    public int? Page { get; set; }

    private static int PageSize { get; set; } = 36; 
    private bool _isLoading { get; set; } = false;
    private HunterResponseWithPagination Response { get; set; } = new();

   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await FetchResponse();
    }

    protected override async Task OnParametersSetAsync()
    {
    }

    private async Task FetchResponse()
    {
        _isLoading = true;
        var queryParametersMangadex = new QueryParameters {Page = Page ?? 1, Size = PageSize, Status = Status, HasMangadex = true};

        var result =
            await PrerenderCache
                .GetOrAdd($"{OwnerUsername}.{Page}.{queryParametersMangadex.Status}", () => ApiService
                    .GetUserListWithPagination(OwnerUsername, queryParametersMangadex));
        if (!result.IsError)
        {
            Response = result.Value;
        }
        _isLoading = false;
    }

}