@page "/dashboard"
@inject IApiService ApiService
<PageHeader Title="@("Dashboard")"/>

<TodayRssComponent TodayRssDto="TodayRssDto"/>

<LastHuntersComponent UserListWithPagination="UserListWithPagination"/>

<MostFollowedMangadexComponent MostFollowsMangadex="MostFollowsMangadex"/>

@* <MudExpansionPanel Text="Debugging stuffs"> *@
@*     <div>Response.Count @ResponseDebug.Count</div> *@
@*     <MudButton Disabled="@disabled" OnClick="FetchDataDebug">FetchData</MudButton> *@
@*     <MudButton Disabled="@disabled" OnClick="FetchNewIds">FetchNewIds</MudButton> *@
@*     <MudButton Disabled="@disabled" OnClick="DeleteNull">DeleteNull</MudButton> *@
@* </MudExpansionPanel> *@
@* @if (ResponseDebug is not {Count:0}) *@
@* { *@
@*     <MudGrid> *@
@*         @foreach (var hunterResponse in ResponseDebug) *@
@*         { *@
@*             <MudItem md="4"> *@
@*                 <div> *@
@*                     <MudLink Href="@($"https://mangadex.org/title/{hunterResponse.HunterDto.MangadexId}")"> *@
@*                         @hunterResponse.HunterDto.MangadexId *@
@*                     </MudLink> *@
@*                 </div> *@
@*                 <div>@hunterResponse.HunterDto.BakaId</div> *@
@*             </MudItem> *@
@*         } *@
@*     </MudGrid> *@
@* } *@

@code {

    [CascadingParameter]
    protected UserState UserState { get; set; }

    private List<HunterResponseNew> MostFollowsMangadex { get; set; } = new();
    private HunterResponseWithPagination UserListWithPagination { get; set; } = new();
    private TodayRssDto TodayRssDto { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        var todayRss = await ApiService.GetTodayRss();
        if (!todayRss.IsError)
        {
            TodayRssDto = todayRss.Value;
        }

        if (UserState.IsAuthenticated)
        {
            var userListWithPagination =
                await ApiService.GetUserListWithPagination(UserState.Username, new QueryParameters
                {
                    Page = 1,
                    Size = 3,
                    HasMangadex = true,
                    HasMangaUpdates = true
                });

            if (!userListWithPagination.IsError)
            {
                UserListWithPagination = userListWithPagination.Value;
            }
        }

        var mostFollowsMangadex = await ApiService.Search(new SearchQueryParameters {Amount = 3});
        if (!mostFollowsMangadex.IsError)
        {
            MostFollowsMangadex = mostFollowsMangadex.Value;
        }
    }

    // private List<HunterResponse> ResponseDebug { get; set; } = new();
    // private async Task MakeRequest()
    // {
    //     const string username = "Ecchi";
    //     var result = await ApiService.AddManga(username, new HunterDto
    //     {
    //         MangadexId = new Guid("b1461071-bfbb-43e7-a5b6-a7ba5904649f"),
    //         Status = ReadingStatusDto.WantToRead,
    //         Username = username
    //     });
    //     if (result.IsError)
    //     {
    //         Snackbar.Add("Error", Severity.Error);
    //         Snackbar.Add(result.FirstError.Description, Severity.Error);
    //     }
    //     else
    //     {
    //         Snackbar.Add("Good", Severity.Success);
    //     }
    // }

    // private async Task FetchDataDebug()
    // {
    //     // var parms = new QueryParameters {HasMangadex = false, HasMangaUpdates = false};
    //     // var result = await ApiService.GetUserList(UserState.Username, parms);
    //     // if (!result.IsError)
    //     // {
    //     //     ResponseDebug = result.Value.Where(hunterResponse => hunterResponse.HunterDto.BakaId is 0).ToList();
    //     // }
    // }

    // private async Task DeleteNull()
    // {
    //     foreach (var hunterResponse in ResponseDebug.Where(hunterResponse => hunterResponse.MangadexDto is null))
    //     {
    //         var mangadexId = hunterResponse.HunterDto!.MangadexId.ToString();
    //         var parameters = new QueryParameters {HasMangadex = true, HasMangaUpdates = false};
    //         var result = await ApiService.GetMangaById(UserState.Username, mangadexId, parameters);
    //         if (result.IsError)
    //             break;
    //         if (result.Value.MangadexDto is null)
    //         {
    //             await ApiService.DeleteManga(UserState.Username, mangadexId: mangadexId);
    //         }
    //         await Task.Delay(500);
    //     }
    // }
    //
    // private async Task FetchNewIds()
    // {
    //     foreach (var hunterResponse in ResponseDebug)
    //     {
    //         var newId = await ApiService.GetNewMangaUpdatesId(UserState.Username, hunterResponse.HunterDto.MangadexId.ToString());
    //         if (newId.IsError)
    //             continue;
    //         hunterResponse.HunterDto.BakaId = newId.Value;
    //         await ApiService.UpdateManga(UserState.Username, hunterResponse.HunterDto);
    //         StateHasChanged();
    //         await Task.Delay(500);
    //     }
    // }
}